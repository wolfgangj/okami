\ text.ok - text section of the okami interpreter
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

: next [
  4 # r10 r7 +ldr       \ get CFA, keep it here for dodoes/docol
      r7  pc  ldr       \ get code field value
];

:: dodoes
   \ `next` leaves the CFA in r7, so we push CFA+8
                r0     push
   8 #    r7    r0     add
   4 #    r7    r7    +ldr
   4 #    r7    r7     sub
   \ fall through
:: docol
   -4 #    r12    r10    +str!  \ push ip on rst
    4 #    r7     r10     add   \ set up new ip
:: next                         \ nice to have it as branch target
   next

:: dopush
                r0    push
   4 #    r7    r0    add
                      next

:: code_exit
   4 #    r12    r10    +ldr
                        next

:: code_dup
   r0    push
         next

:: code_drop
   r0    pop
         next

:: code_lit
                 r0     push
   4 #    r10    r0    +ldr!
                        next

:: code_swap
   r0    r1    mov
   sp    r0    ldr
   sp    r1    str
               next

:: code_0branch
   0 #               r0     cmp
                     r0     pop
   4 #        r10    r10    add    ne
   ## next                  b      ne
   \ fall through
:: code_branch
   r10    r10    ldr
                 next

:: code_over
                r0     push
   4 #    sp    r0    +ldr
                       next

:: code_fetch
   r0    r0    ldr
               next

:: code_c_getch
   r0    r0    ldrb
               next

:: code_store
   regs( r1 | r2 )regs    pop
   r0    r1               str
   r2    r0               mov
                          next

:: code_c_store
   regs( r1 | r2 )regs    pop
   r0    r1               strb
   r2    r0               mov
                          next
:: code_plus
               r1    pop
   r0    r1    r0    add
                     next
:: code_minus
               r1    pop
   r0    r1    r0    sub
                     next

:: code_multiply
               r1    pop
   r0    r1    r0    mul
                     next
:: code_divide
               r1    pop
   r0    r1    r0    sdiv
                     next

\ TODO :: code_divide_mod

:: code_is_eq_p
   sp    r1    ldr
   r0    r1    cmp
   0 #   r0    mov    ne
   0 #   r0    mvn    eq
               next

:: code_is_ne_p
   sp    r1    ldr
   r0    r1    cmp
   0 #   r0    mov    eq
   0 #   r0    mvn    ne
               next

:: code_is_lt_p
   sp    r1    ldr
   r0    r1    cmp
   0 #   r0    mov    ge
   0 #   r0    mvn    lt
               next

:: code_is_gt_p
   sp    r1    ldr
   r0    r1    cmp
   0 #   r0    mov    le
   0 #   r0    mvn    gt
               next

:: code_is_le_p
   sp    r1    ldr
   r0    r1    cmp
   0 #   r0    mov    gt
   0 #   r0    mvn    le
               next

:: code_is_ge_p
   sp    r1    ldr
   r0    r1    cmp
   0 #   r0    mov    lt
   0 #   r0    mvn    ge
               next

:: code_is_eq
         r1    pop
   r0    r1    cmp
   0 #   r0    mov    ne
   0 #   r0    mvn    eq
               next

:: code_is_ne
         r1    pop
   r0    r1    cmp
   0 #   r0    mov    eq
   0 #   r0    mvn    ne
               next

:: code_is_lt
         r1    pop
   r0    r1    cmp
   0 #   r0    mov    ge
   0 #   r0    mvn    lt
               next

:: code_is_gt
         r1    pop
   r0    r1    cmp
   0 #   r0    mov    le
   0 #   r0    mvn    gt
               next

:: code_is_le
         r1    pop
   r0    r1    cmp
   0 #   r0    mov    gt
   0 #   r0    mvn    le
               next

:: code_is_ge
         r1    pop
   r0    r1    cmp
   0 #   r0    mov    lt
   0 #   r0    mvn    ge
               next

:: code_to_r
   4 #    r12    r0    +str!
   ## code_drop        b

:: code_r_from
                 r0      push
   4 #    r12    r0     +ldr
                         next

:: code_rdrop
   4 #    r12    r12    add
                        next

:: code_r_fetch
          r0    push
   r12    r0    ldr
                next

:: code_aux
         r0    push
   r6    r0    mov
               next

:: code_to_aux
   -4 #    r11    r6    +str!
           r0     r6     mov
                  r0     pop
                         next

:: code_aux_from
                 r0    push
          r6     r0    mov
   4 #    r11    r6    ldr+!
                       next

:: code_auxdrop
   4 #    r11    r6    ldr+!
                       next

:: code_not
   r0    r0    mvn
               next

:: code_and
               r1    pop
   r1    r0    r0    and
                     next

:: code_or
               r1    pop
   r1    r0    r0    orr
                     next

:: code_and
               r1    pop
   r1    r0    r0    eor
                     next

:: code_2dup
              sp    r1    ldr
              r0    r2    mov
   regs( r1 | r2 )regs    push
                          next

:: code_shift_left
                r1    pop
   r0 r1 lsl    r0    mov
                      next

:: code_shift_right
                r1    pop
   r0 r1 lsr    r0    mov
                      next

:: code_execute
   r0    r7    mov
         r0    pop
   r7    pc    lsr

:: code_nip
   4 #    sp    sp    add
                      next

:: code_tuck
   sp    r1    ldr
   sp    r0    str
         r1    push
               next

:: code_syscall0
   r0    r7    mov
               swi
               next

:: code_syscall1
   r0    r7    mov
         r0    pop
               swi
               next

:: code_syscall2
              r0    r7    mov
   regs( r0 | r1 )regs    pop
                          swi
                          next

:: code_syscall3
                   r0    r7    mov
   regs( r0 | r1 | r2 )regs    pop
                               swi
                               next

:: code_syscall4
                        r0    r7    mov
   regs( r0 | r1 | r2 | r3 )regs    pop
                                    swi
                                    next

:: code_syscall5
                             r0    r7    mov
   regs( r0 | r1 | r2 | r3 | r4 )regs    pop
                                         swi
                                         next

\ TODO: n_dot emit key word str_eq find cs2n

:: code_hp
                  r0    push
\   ## here_ptr    r0    mov32  \ TODO: needs .data
                        next

:: code_comma
\   ## here_ptr    r1    mov32  \ TODO: needs .data
   r1             r2    ldr
   4 #    r2      r0    str+!
          r1      r2    str
   ## code_drop         b

:: code_c_comma
\   ## here_ptr    r1    mov32  \ TODO: needs .data
   r1             r2    ldr
\   1 #    r2      r0    strb+!  \ TODO: this one is still missing
          r1      r2    str
   ## code_drop         b

\ TODO: dot_s str_dot copy_str entry
\ TODO: docol_comma dodoes_comma dopush_comma quit
\ TODO: dp pushkey depth rsbounds
