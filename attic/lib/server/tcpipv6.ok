\ tcpipv6.ok - TCP/IPv6 server
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

\ server configuration:
var: config:remote-access \ default: only loopback device connections
var: config:server-port
     8080 config:server-port !

\ requires lib/os/io.ok + lib/server/ip.ok + lib/log.ok, therefore lib/syscalls/time.ok

private{

struct{
  2    field:  family
  2    field:  port
  cell field:  flowinfo
  16   field:  ipv6addr
  cell field:  scope
      offset: /sockaddr_in6
  cell field:  socket
} endpoint:

endpoint: server
endpoint: client

var: yes  yes on  \ need this to pass an address to syscalls
: succeed [0<?] if [errno. cr abort] then [drop];

: restrict-access [config:remote-access @ not] if [1 server ipv6addr 15 + c!] then ;
: tcp/ipv6-socket [IPPROTO_IP SOCK_STREAM PF_INET6 socket(syscall) dup succeed];
\ : htons         [dup 255 and 8 << swap 255 not and 8 >> or];
: net-h!          [2dup  swap 8 >> swap c!  1+ c!]; \ set halfword in network byte order
: h!              [2dup  c!  1+ swap 8 >> swap c!]; \ set halfword
: choose-port     [config:server-port @ server port net-h!];

\ use port even if it was used within the last minutes:
: reuse-port [cell yes SO_REUSEADDR SOL_SOCKET  server socket @  setsockopt(syscall)  succeed];

\ no dual stack:
str: $listening "listening on "
: ipv6-only     [cell yes IPV6_V6ONLY IPPROTO_IPV6  server socket @  setsockopt(syscall)  succeed];
: family-ipv6   [AF_INET6 server family h!];
: log-binding   [log( $listening str.   server ipv6addr ipv6. cr )log];
: bind          [/sockaddr_in6 server  server socket @  bind(syscall)  succeed  log-binding];
: config-server [reuse-port ipv6-only  family-ipv6 choose-port restrict-access];

5 const: backlog
: listen [backlog  server socket @  listen(syscall)  succeed];
var: (/sockaddr_in6) \ may be changed by `accept` syscall
: reset-(/sockaddr_in6) [/sockaddr_in6 (/sockaddr_in6) !];
: accept [reset-(/sockaddr_in6)
          (/sockaddr_in6) client  server socket @  accept(syscall)  dup succeed  client socket !];
str: $disconnected "connection closed"
: log-disconnect [log( $disconnected str. cr )log];
: disconnect [client socket @ close(syscall) succeed log-disconnect];

str: $request "request from "
: log-request [$request str.  client ipv6addr ipv6. cr];

4096 const: /requestbuf
    create: requestbuf /requestbuf allot
       var: filled
       var: processed
: recv [MSG_NOSIGNAL /requestbuf requestbuf  client socket @  recv(syscall)
        dup succeed filled ! 0 processed !];

: str>len&start      [cdata over - swap];

}in{

: 0reqbuf   [0 filled !  0 processed !];
: peekreqb  [filled @ processed @  =] if [recv] then [requestbuf processed @ + c@];
: getreqb   [peekreqb  processed 1+!];
: send      [MSG_NOSIGNAL swap str>len&start  client socket @  send(syscall) succeed];

defer: handle-request

: tcp-server [tcp/ipv6-socket server socket !  config-server  bind listen]
             begin [accept log( log-request handle-request disconnect )log false] until ;

}
