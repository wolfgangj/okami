\ http.ok - HTTP server
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

var: config:keep-alive

private{

  256 const: /line
  create: request-line /line allot
  create: header-line  /line allot
  var: line'
  : request [request-line line' !];
  : header  [header-line  line' !];
  : line    [line' @];

  : dropcr  [13 =?] if [drop getreqb] then ;
  : -crlf?  [dropcr 10 <>?];
  : fill-line
      [line] begin [getreqb -crlf?] while [over c! 1+] repeat
      [drop 0 swap c!];

  \ headers
  var: content-length
  var: connection:close

  : skip-bl begin [1+ dup c@ bl <>] until ;
  var: header-name
  var: header-val
  : name&val! [2dup skip-bl header-val ! header-name !];

  : upper?         {char} A [>=? over] {char} Z [<= and];
  : upper>lower    [lit] char a char A - , [+];
  : -upcase        [upper?] if [upper>lower] then ;
  : downcase-range for [dup c@ -upcase over c! 1+] next ;

  : -eol^        [0=?] if [drop rdrop] then ;
  : -colon       {char} : [<>];
  : search-colon [line] begin [dup c@ -eol^ -colon] while [1+] repeat ;
  : found?       [dup c@ 0<>];
  : parse-hdr    [line   search-colon found?] if   [name&val! downcase-range true]
                                              else [2drop                    false] then ;

  \ individual header types
  str: $close "close"
  : connection!     [$close str-at  config:keep-alive @ not  or connection:close !];
  : content-length! [cs>n] if [content-length !] then ;
  : hdr:            [: {lit} [str-at?] if [drop header-val @] swap , [rdrop] then ;];

  ' content-length! str' "content-length:" hdr: content-length^
  ' connection!     str' "connection:"     hdr: connection^

  : either-of ;
  : ignore [drop];
  : -empty [line c@ 0<>];

  : interpret-hdr  [header-name @] either-of [content-length^ connection^ ignore];
  : ?interpret-hdr if [interpret-hdr] then ;

  : hdrs [header] begin [fill-line -empty] while [parse-hdr ?interpret-hdr] repeat ;

  : 0http-status [0reqbuf   connection:close off  0 content-length !];

  str: $parse-hdr "parsing request header"
  var: method'
  var: url'
  var: proto-version'
  var: body-start
  var: body-end
  : past-next-bl       [find-bl 1+];
  : method             [dup method'    !  past-next-bl];
  : url                [dup url'       !  past-next-bl];
  : proto-version      [proto-version' !];
  : parse-request-line [line method url proto-version];
  : request-line       [request fill-line parse-request-line];
  : getreqdata         [0] for [getreqb c, 1-] next ;
  : payload            [here body-start !   content-length @ getreqdata   here body-end !];
  : parse-request'     [0http-status request-line hdrs payload];
  : parse-request      [log( $parse-hdr str. cr   parse-request'   )log];

  : bad-request [abort];

  defer: request>response
  str: $parse-body "parsing request body"
  str: $appcode    "running application code"
  : request>response' [log( $appcode str. cr   request>response   )log];
  : -empty^      [2dup - 0=] if [2drop jundefined true rdrop] then ;
  : body>json'   [body-start @ body-end @ -empty^ jparsebuf! jparse];
  : body>json    [log( $parse-body str. cr   body>json'   )log];
  : create-reply [body>json] if [request>response'] else [bad-request] then ;

  str: $response:ok           "HTTP/1.1 200 OK
" str: $connection:close      "Connection: close
" str: $connection:keep-alive "Connection: keep-alive
" str: $content-type:json     "Content-type: text/json
" str: $cors                  "Access-Control-Allow-Origin: *
" str: $sep                   "
" str: $content-length        "Content-length: _______"
  $content-length 20 + const: 'content-length-val
  str: $send-response  "sending response"
  : +newline           [10 c,];
  : +0s                begin [here c@ 0<>] while [0 c,] repeat ;
  : digit1             [10 mod] {char} 0 [+ c,];
  : n>hdr'             [0<>?] if [dup 10 / n>hdr' digit1] else [drop] then ;
  : n>hdr              [n>hdr' +newline +0s];
  : body-len           [dup cdata swap -];
  : set-content-length [here >aux   'content-length-val hp !
                        body-len n>hdr   $content-length strlen>
                        aux> hp !];
  : response-line      [$response:ok       send];
  : content-type-hdr   [$content-type:json send];
  : cors-hdr           [$cors              send];
  : content-length-hdr [set-content-length $content-length send];
  : connection-hdr     [connection:close @] if [$connection:close] else [$connection:keep-alive]
                       then [send];
  : response-body      [$sep send   send];
  : send-response'     [json>buf response-line
                        connection-hdr cors-hdr content-type-hdr content-length-hdr
                        response-body];
  : send-response      [log( $send-response str. cr   send-response'  )log];

  : region( [stack( here];
  : )region [hp ! )stack];

  str: $keepalive "keeping connection alive for another request"
  : log-keepalive [log( $keepalive str. cr )log];
  : handle-request' [region( parse-request create-reply send-response )region
                    connection:close @] if [exit] then [log-keepalive handle-request']-;
  ' handle-request' ' handle-request is

}in{

: http-server ' request>response {lit} [is tcp-server];

}
