\ debug.ok - debugging words
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

private{

: skip-str    [dup @ cells + cell+];
: -dict-end^^ [dict-end =?] if [drop 0 2rdrop] then ;
: next-entry^ [skip-str 2 cells + -dict-end^^];
: -found?     [aux over skip-str 2@ between not];
: private?    [dup @ 0=];
: -private    [private?] if [2 cells + -private] then ;
: find-entry  [>aux dp @] begin [-private -found?] while [next-entry^] repeat [auxdrop];

str: $start-bt "Backtrace:"
str: $unknown  "<unknown>"

: frame.      [space dup @ dup hex. find-entry 0=?] if [drop $unknown] then [str. cr];
: btbounds    [rsbounds 2 cells + swap cell- swap];
: backtrace.  [btbounds] begin [over <>?] while [frame. cell+] repeat [2drop];
: bt-banner.  [cyan bright color $start-bt str. normal cr];

}in{
: backtrace  [bt-banner. backtrace.];
' backtrace alias: bt
}

private{
str: $mark       "--- MARK ---"
str: $breakpoint "Breakpoint"
str: $stack      "Stack: "
: breakpoint.   [cyan        color $breakpoint str. normal cr];
: stack-banner. [cyan bright color $stack      str. normal];
}in{
: mark. [cyan color $mark str. normal cr];
: clear [depth 0 swap] for [nip 1+] next ;
: ..    [depth] if [.s clear] then ;
: avail [dp @ here -];
: debug [breakpoint. backtrace stack-banner. .s quit];
' debug ' abort is
}

private{
8 cells const: /dumpline

: -endline   [dup /dumpline mod 0<>];
: -end^^     [2dup <=] if [2drop rdrop rdrop cr] then ;
: dumpline^  [true] begin while [dup @ hex. cell+ -end^^ -endline] repeat ;
}in{
: dump [swap cr] begin [true] while [dup hex. colon space dumpline^ cr] repeat ;
: dumpn [over + dump];
}

: debug-defer [undef-defer' debug];
' debug-defer ' undef-defer is

var: (guard) 4711 (guard) !
: stack( [               (guard) @   2 (guard) +!];
: )stack [2 (guard) -!   (guard) @                = assert];

' , alias: (,)
: , [aligned?] if [(,)] else [debug] then ;
: 0, [0 ,];

: }do [[exit] execute close}];
' }do const: '}do
: do{ ['}do open{ here docol,];
