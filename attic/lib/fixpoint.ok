\ fixpoint.ok - fixed point arithmetic
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

1000 const: fixbase
: >fix [fixbase *];
: fix> [fixbase /];

: fix* [* fixbase /];
: fix/ [fixbase dup * swap / fix*];

: % [fixbase * 100 /];

private{

str: $buf "-2147483.648xxx" \ longest number
var: target
: 0target   [$buf cell+ target !];
: #cells    [cell 1- + cell /];
: len!      [target @ $buf - #cells 1-  $buf !];
: emit'     [target @ c!+ target !];
: terminate [0 emit'   len!   0 emit'   0 emit'   0 emit'];
: ?sign     [0<?] if {char} - [emit' 0 swap -] then ;
: 0^        [0=?] if {char} 0 [emit' drop rdrop] then ;
: digit1    [10 mod] {char} 0 [+ emit'];
: n.''      [0<>?] if [dup 10 / n.'' digit1] else [drop] then ;
: n.'       [0^ n.''];
: -zero     [0=?] if [drop 1] then ;
: 0s.       [dup -zero] begin [10 * fixbase <?] while {char} 0 [emit'] repeat [drop];
: convert   [0target ?sign   fixbase /mod n.'] {char} . [emit' 0s. n.' terminate]; 

: 3drop       [drop drop drop];
: @minus?     [dup c@] {char} - [=];
: digit>n     {char} 0 [-];
: ?signed(    [@minus?] if [1+ -1] else [1] then [swap];
: )?signed    [>aux * aux>];
: accumulate  [aux> 10 * + >aux];
: integer     [0 >aux] begin [c@+ digit?] while [digit>n accumulate] repeat [drop aux> >fix swap 1-];
: -point?     {char} . [<>];
: point^      [c@+ -point?] if [3drop false rdrop] then ;
: fractionals [drop 456 +];
: nextbase    [aux> 10 / dup >aux];
: fractionals [swap here ! fixbase >aux] begin [c@+ digit?] while [digit>n nextbase * here +!] repeat
              [drop auxdrop here @ swap];
: end^        [1- c@ 0<>] if [drop auxdrop false] then ;

}in{

: fix.    [convert      $buf str.];
: fix>str [convert here $buf str,];
: fix>buf [convert      $buf];

: cs>fix  [?signed( integer point^ fractionals )?signed   end^ true];
: str>fix [cell+ cs>fix];

}

: fix [word str>fix not] if [abort] then ;
: {fix} [fix {lit}];
