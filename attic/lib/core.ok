\ core.ok - basic definitions for okami
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

dp @ \ for dict-end

entry: : docol, [entry: docol, exit]
\ : ; [[exit] exit]
: entry-end [hp @ dp @ dup @ 2 + 4 * + ! exit]
: ; [[exit] entry-end exit]

: dict-end [lit] , ;

: here [hp @];
: 0, [0 ,];

: mark>    [here 0,];
: resolve> [here swap !];

: if   [[0branch] mark>];
: then [resolve>];
: else [[branch] mark> >aux resolve> aux>];

: begin  [here];
: while  [[0branch] mark>];
: repeat [[branch] swap , resolve>];
: until  [[0branch] ,];
: for    [[>aux] here [aux <>? 0branch] mark> swap];
: next   [[branch] , resolve> [auxdrop drop]];

: char [key drop key];

: create: [entry: dopush,];
: with    [[entry: dodoes, lit] mark> [,]];
: does    [[exit] resolve>];

: const: with [,] does [@];
: var:   [create: 0,];

: yield [r> r> swap >r >r];
: 2rdrop [r> rdrop rdrop >r];

4 const: cell
: cells  [cell *];
: cell+  [cell +];
: cell-  [cell -];
: #cells [cell /];

-1 const: true
0  const: false
: on     [true  swap !];
: off    [false swap !];
: toggle [dup @ not swap !];

: 1+     [1 +];
: 1-     [1 -];
: +!     [tuck @      + swap !];
: -!     [tuck @ swap - swap !];
: 1+!    [1 swap +!];
: 1-!    [1 swap -!];
: cell+! [cell swap +!];
: c@+    [dup 1+ swap c@];
: c!+    [tuck c! 1+];
: 0=     [0 =];
: 0=?    [dup 0 =];
: 0<>    [0 <>];
: 0<>?   [dup 0 <>];
: 0<     [0 <];
: 0<?    [dup 0 <];
: 0>     [0 >];
: 0>?    [dup 0 >];
: 0<=    [0 <=];
: 0<=?   [dup 0 <=];
: 0>=    [0 >=];
: 0>=?   [dup 0 >=];
: negate [0 swap -];

32 const:  bl
: space    [bl emit];
: spaces   [0 swap] for [space 1+] next ;
: cr       [10 emit];
: .        [n. space];
: ?        [@ .];
: emitter: with [char ,] does [@ emit];
emitter:   colon :
: cpred:   with [char ,] does [@ =?];
: ahead    [key dup pushkey];

: bye  [0 sysexit];
: fail [1 sysexit];

var: ($undef-defer) \ value given later when we can create strings
: undef-defer' [($undef-defer) @ str. cr];
: undef-defer  [undef-defer'];  \ can be overwritten as defered word to e.g. enter debugger
: defer:       [: [undef-defer];];
: is           [cell+ !];

var: ($unknown)
: unknown [($unknown) @ str. str. space];
: '       [word dup find not] if [unknown] else [nip] then ;
: alias:  [here swap hp ! entry: hp !];

: {lit}  [[lit] ,];
: {char} [char {lit}];
: {'}    [' {lit}];

: ?dup  [dup] if [dup] then ;
: 2drop [drop drop];
: 2@    [dup @ swap cell+ @]; \ addr -- @addr @next
: ?if   [[?dup] if];

: abs      [0<?] if [negate] then ;
: between  [>aux >=? swap aux> <= and];
: between? [>aux >=? over aux> <= and];
: max      [2dup >] if [drop] else [nip] then ;
: min      [2dup <] if [drop] else [nip] then ;

: digit? {char} 0 {char} 9 [between?];

: mod [/mod drop];

: allot  [hp +!];
: array: with [cells allot] does [swap cells +];

: >aligned [cell 2dup mod 0=?] if [2drop] else [- +] then ;
: align    [here >aligned hp !];
: aligned? [cell 1- here and 0=];
: ahere    [align here];

: str,    [here copy-str  @ cells allot];
: str<>   [str= not];
: str=?   [over str=];
: +0&pad  begin [0 c, aligned?] until ;
: strlen> [here over - #cells 1- swap !];

defer: }  ' } const: '}
: open{  ['} cell+ @ swap '} is]; 
: close} ['} is];

: dict,    [dp @ cell- dup dp ! !];
: }private [close}   !];
           ' }private const: '}private
: private{ [dp @];
: }in{     [dp @ dict,   dp @   0 dict,   '}private open{];

private{
  : delimiter      begin [key bl =?] while [drop] repeat ;
  : read-delimited [>aux] begin [key aux <>?] while [c,] repeat [drop auxdrop];
  : read-str       [mark> delimiter read-delimited +0&pad strlen>];
}in{
: str' [here read-str];
: str: with [read-str] does [];
}
str' "deferred word used but not defined." ($undef-defer) !
str' "unknown word quoted: " ($unknown) !

: }struct with [, close}] does [@ here swap allot const:];
' }struct const: '}struct
: struct{ ['}struct open{   0];
: field:  with [over , +] does [@ +];
: offset: [dup const:];

\ useful for jump tables:
: perform [@] ?if [execute] then ;

defer: abort
' fail ' abort is
str: $assert "assertion failed!"
: assert   [not] if [$assert str. cr abort] then ;
: ?assert  [dup assert];

: stack( ;
: )stack ;

: -; [here cell- dup @ swap] {'} branch [swap ! cell+ , entry-end];
