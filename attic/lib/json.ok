\ json.ok - JSON data format processing
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

\ requires lib/fixpoint.ok + lib/enum.ok + lib/str.ok

enum{
  val: jtype.undefined \ not part of JSON itself
  val: jtype.null
  val: jtype.bool
  val: jtype.int
  val: jtype.fix
  val: jtype.str
  val: jtype.ary
  val: jtype.obj
  val: #jtypes
}
: jtype [@];
: jval  [cell+ @];

create: jundefined jtype.undefined , 0 ,
create: jnull  jtype.null , 0,
create: jtrue  jtype.bool , true ,
create: jfalse jtype.bool , false ,
: jbool if [jtrue] else [jfalse] then ;

: jint  [ahere jtype.int , swap ,];
: jfix  [ahere jtype.fix , swap ,];
: jstr  [ahere jtype.str , swap ,];
: jary  [ahere jtype.ary , here 0,];
: jobj  [ahere jtype.obj , here 0,];
: +jary [swap  ahere swap !         , here 0,];
: +jobj [>aux >aux ahere swap ! aux> aux> , , here 0,];

: jpred: with [,] does [@ over @ =];
jtype.undefined jpred: jundefined?
jtype.null      jpred: jnull?
jtype.bool      jpred: jbool?
jtype.int       jpred: jint?
jtype.fix       jpred: jfix?
jtype.str       jpred: jstr?
jtype.ary       jpred: jary?
jtype.obj       jpred: jobj?

var: jprint>buf?

private{

\ === output ===
defer: emit'
defer: str.'
defer: n.'
defer: fix.'

\ implementations which write to memory buffer
: emit'' [c,];
: str.'' [cell+] begin [dup c@ dup] while [emit'' 1+] repeat [2drop];
: fix.'' [fix>buf str.''];
: ?sign  [0<?] if {char} - [emit'' 0 swap -] then ;
: 0^     [0=?] if {char} 0 [emit'' drop rdrop] then ;
: digit1 [10 mod] {char} 0 [+ emit''];
: n.'''  [0<>?] if [dup 10 / n.''' digit1] else [drop] then ;
: n.''   [0^ ?sign n.'''];

: use-obuf
   {'} emit'' {'} emit' [is]
   {'} str.'' {'} str.' [is]
   {'} n.''   {'} n.'   [is]
   {'} fix.'' {'} fix.' [is]
   ;
: -use-obuf
   {'} emit {'} emit' [is]
   {'} str. {'} str.' [is]
   {'} n.   {'} n.'   [is]
   {'} fix. {'} fix.' [is]
   ;
-use-obuf

var: $obuf \ address
: obufsize!   [here $obuf @ - #cells 1- $obuf @ !];
: ?obuffered( [jprint>buf? @] if [here $obuf ! 0,   use-obuf] else [-use-obuf] then ;
: )?obuffered [jprint>buf? @] if [+0&pad obufsize!] then ;

#jtypes array: printers
: json.' [dup jval swap jtype printers @ execute];

str: $undefined "undefined"
: jundefined. [drop $undefined str.'];

str: $null "null"
: jnull. [drop $null str.'];

str: $true  "true"
str: $false "false"
: jbool. if [$true] else [$false] then [str.'];

: jint. [n.'];
: jfix. [fix.'];

: esc. {char} \ [emit'];
: esc: [here docol, [drop esc.] swap {lit} [emit']; : {lit} [,];];
char t esc: t
char n esc: n
char r esc: r
char " esc: "
char \ esc: /
: _ {'} emit' [,];
create: charmap
  _ _ _ _ _ _ _ _ _ t n _ _ r _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
  _ " _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ / _ _ _ _ _ _
  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

: str(.  {char} " [emit'];
: )str.  [str(.];
: ascii. [dup cells charmap + @ execute];
: strc.  [128 <?] if [ascii.] else [emit'] then ;
: jstr.  [str(. cell+] begin [dup c@ 0<>?] while [strc. 1+] repeat [)str. 2drop];

: ary(.  {char} [ [emit'];
: )ary.  {char} ] [emit'];
: sep    {char} , [emit'];
: ary->  [cell+ @];
: ?sep   [dup] if [sep] then ;
: jary.  [ary(.] begin [dup] while [dup @ json.' ary-> ?sep] repeat [drop )ary.];

: obj(. {char} { [emit'];
: obj-> [2 cells + @];
: )obj. {char} } [emit'];
: colon {char} : [emit'];
: jobj. [obj(.] begin [dup] while [dup 2@ swap jstr. colon json.' obj-> ?sep] repeat [drop )obj.];

' jundefined. jtype.undefined printers !
' jnull. jtype.null printers !
' jbool. jtype.bool printers !
' jint.  jtype.int  printers !
' jfix.  jtype.fix  printers !
' jstr.  jtype.str  printers !
' jary.  jtype.ary  printers !
' jobj.  jtype.obj  printers !

\ === parsing ===
defer: key'
defer: pushkey'

var: istart
var: iend
: ibuf@+    [istart @ c@+ swap istart !];
: key''     [istart iend <>] if [ibuf@+] else [0] then ; \ FIXME: -1?
: pushkey'' [1 istart -!  istart @ c!];

: use-ibuf
   {'} key''     {'} key'     [is]
   {'} pushkey'' {'} pushkey' [is]
   ;
: -use-ibuf
   {'} key     {'} key'     [is]
   {'} pushkey {'} pushkey' [is]
   ;
-use-ibuf

var: had-err
: 0had-err   [had-err off];
: parse-err  [had-err on];
: had-err?   [had-err @];
: -had-err^  [had-err?] if [           rdrop] then ;
: -had-err+^ [had-err?] if [jundefined rdrop] then ;
: jassert    [not] if [parse-err] then ;

cpred: comma? ,
: sep?     [dup comma? swap whitespace or];
: -sep-key begin [key' sep?] while [drop] repeat ;

: {parse-rest} begin [c@+ dup] while [{lit} [key' = jassert -had-err^]] repeat [2drop];
: expect: [: [-had-err^ lit] cell+ c@+ , [<>?] if [exit] then
          {parse-rest} [drop] {lit} [true 2rdrop];];

jtrue  $true  expect: jtrue^^
jfalse $false expect: jfalse^^
jnull  $null  expect: jnull^^
: jimm^ [-had-err^ jtrue^^ jfalse^^ jnull^^];

create: numbuf 16 allot here const: eobuf
var: had-dot
cpred:           minus? -
cpred:           dot? .
: permitted-dot? [dot? had-dot @ not and dup] if [had-dot on] then ;
: num?           {char} 0 {char} 9 [between?];
: -end^          [num? over permitted-dot? nip or not] if [pushkey' auxdrop rdrop] then ;
: ?sign          [key' minus?] if [swap c!+] else [pushkey'] then ;
: parse-num'     [had-dot off numbuf ?sign eobuf 1-] for [key' -end^ swap c!+] next [eobuf 1-];
: parse-num      [parse-num' 0 swap c!];
: valid^^        [not] if [parse-err jundefined 2rdrop] then ;
: input>jnum     [parse-num numbuf had-dot @] if [cs>fix valid^^ jfix] else [cs>n valid^^ jint] then ;
: start-num?     [num? over dot? swap minus? nip or or];
: jnum^          [-had-err^ start-num?] if [pushkey' input>jnum rdrop true] then ;

: start-ary^ {char} [ [=?] if [drop] else [rdrop] then ;
: -eoa^      {char} ] [=?] if [drop rdrop] then ;
defer:       element
: elements   [-sep-key -eoa^ element -had-err^ +jary elements]-;
: jary^      [-had-err^ start-ary^ jary elements drop   had-err @ not dup] if [rdrop] else [nip] then ;

: element|ud [element had-err?] if [jundefined] then ;
: start-obj^ {char} { [=?] if [drop] else [rdrop] then ;
: -eoo^      {char} } [=?] if [drop rdrop] then ;
: objkey     [element|ud -had-err^ jstr? jassert jval];
: objval     [-had-err+^ -sep-key element|ud];
: colon      [-had-err^ -sep-key] {char} : [<>] if [parse-err] then ;
: kvpair     [objkey colon objval swap];
: kvpairs    [-sep-key -eoo^ kvpair +jobj -had-err^ kvpairs]-;
: jobj^      [-had-err^ start-obj^ jobj kvpairs drop   had-err? not dup] if [rdrop] else [nip] then ;

cpred: backslash? \
cpred: quote? "
: /t^            {char} t [=?] if [drop 9  rdrop] then ;
: /n^            {char} n [=?] if [drop 10 rdrop] then ;
: /r^            {char} r [=?] if [drop 13 rdrop] then ;
: /"^            {char} " [=?] if [rdrop] then ;
: //^            {char} \ [=?] if [rdrop] then ;
: escaped-c      [/n^ /t^ //^ /"^ /r^ parse-err];
: jstr-c,        [backslash?] if [drop key' escaped-c] then [c,];
: read-delimited begin [key' quote? not] while [jstr-c, -had-err^] repeat [drop];
: read-str       [mark> read-delimited +0&pad strlen>];
: jstr^          [-had-err^ quote?] if [drop   ahere read-str -had-err^ jstr   true rdrop] then ;

: parse    [jimm^ jnum^ jary^ jstr^ jobj^   drop false];
: element' [parse jassert];
' element' ' element is
: jparse'  [-sep-key parse];

}in{

: jary:each [begin [ary-> 0<>?] while [dup >aux @]];
: jary:next [[aux>] repeat [drop]];
: jobj:each [[jval] begin [0<>?] while [dup 2@ swap]];
: jobj:next [[obj->] repeat [drop]];

: #jary [0 swap] jary:each [drop 1+] jary:next ;

: jobj:find
    [>aux] jobj:each [aux str=] if [auxdrop nip true exit] then [drop] jobj:next [auxdrop false];
: jobj:finder:  \ usage: str' "foo" jobj:finder: find-foo
    with [,] does [@ jobj:find];

\ this alternative implementation compiles a new full definition each time:
\ : jobj:finder:
\     [>aux : jobj:each aux> {lit} [str=] if [auxdrop true exit] then [drop] jobj:next [false];];

\ safe accessors
: ?jobj@ [over jundefined =] if [drop exit] then
         [jobj:find not] if [jundefined] then ;

: json.    [?obuffered( json.' )?obuffered];
: jbuf     [$obuf @];
: json>buf [jprint>buf? on json. jbuf];

: jparse     [0had-err jparse' -use-ibuf];
: jparsebuf! [iend ! istart ! use-ibuf];

}
