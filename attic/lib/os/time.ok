\ time.ok - time syscalls and operations
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

: gettimeofday(syscall) [78 syscall2];

struct{
  cell field: timeval:sec  \ for now we're stuck with this being 32 bit on GNU/Linux
  cell field: timeval:usec
} timeval:

struct{
  cell field: timezone:minuteswest \ e.g. -120 for UTC+02:00
  cell field: timezone:dsttime
} timezone:

60 const: 1minute
: minutes [1minute *];
60 minutes const: 1hour
: hours [1hour *];
24 hours const: 1day
: days [1day *];
7 days const: 1week
: weeks [1week *];

: time>seconds [dup 1minute mod];
: time>minutes [dup 1hour mod 1minute /];
: time>hours   [dup 1day mod 1hour /];

private{

  timeval: val
  timezone: zone

  : refresh   [zone val gettimeofday(syscall) 0= assert];
  emitter: dash -
  : twocol.   [10 <?] if [0 n.] then [n.];
  : sign      [0<?] if [0 swap -] {char} - else {char} + then [emit];
  : timezone. [sign   time>hours twocol. colon   time>minutes twocol.   drop];

  \ Okay, this piece of code is /not/ easiely comprehensible; I didn't come up with this
  \ algorithm, and it's unknown who invented it.  If you don't like it, you can easiely
  \ replace it with a slower iterative version.
  : date
     [86400 / dup >aux 4 * 102032 + 146097 / 15 + dup 4 / - 2442113 + aux> + dup 20 * 2442 - 7305 /
      dup dup >aux 365 * swap 4 / + - dup 1000 * 30601 / dup >aux 30 * - aux 601 * 1000 / - aux> 14 <?]
         if [1- -4716] else [13 - -4715] then [aux> +];

}in{

: utcnow [refresh val timeval:sec @];
: now    [utcnow zone   timezone:minuteswest @ minutes   -];

: ago [now swap -]

: date.      [date n. dash twocol. dash twocol.];
: time.      [time>hours twocol. colon   time>minutes twocol. colon   time>seconds twocol. drop];
: timestamp. [now dup date. space time.   0 zone timezone:minuteswest @ - minutes timezone.];

}
