\ asm.ok - assembler
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

\ requires lib/str.ok + lib/asm/elf.ok

: kb [1024 *];

                             64 kb const: &text-segment
                                 2 const: #phdrs
                                 7 const: #shdrs
/Elf32_Ehdr /Elf32_Phdr #phdrs * + const: /header
           &text-segment /header + const: &.text

1 const: .text#
2 const: .data#

\\\\\\\\ ELF header
Elf32_Ehdr: elfhdr

: >c [swap c!+];
elfhdr e_ident
  127 >c 69 >c 76 >c 70 >c                  \ magic ($7F ELF)
    1 >c  1 >c  1 >c  0 >c drop             \ 32bit, little endian, header ver., OS ABI version
          2 elfhdr e_type      c!           \ executable file
         40 elfhdr e_machine   c!           \ AArch32
          1 elfhdr e_version   !            \ ELF version
     &.text elfhdr e_entry     !            \ program entry point
/Elf32_Ehdr elfhdr e_phoff     !            \ program header offset
    5 24 << elfhdr e_flags     !            \ flags: v5eabi
/Elf32_Ehdr elfhdr e_ehsize    c!           \ file header size
/Elf32_Phdr elfhdr e_phentsize c!           \ program header entry size
     #phdrs elfhdr e_phnum     c!           \ number of program headers
/Elf32_Shdr elfhdr e_shentsize c!           \ section header entry size
     #shdrs elfhdr e_shnum     c!           \ number of section headers
          4 elfhdr e_shstrndx  c!           \ section header strings

\\\\\\\\ symbols
create: .strtab 16 kb allot
var: curr.strtab
  .strtab curr.strtab !
: >c          [tuck @ c! 1+!];
: c+.strtab   [curr.strtab >c];
: +.strtab    [cell+] begin [dup c@ dup 0<>] while [c+.strtab 1+] repeat [0 c+.strtab 2drop];
: .strtab:pos [curr.strtab @ .strtab -];

create: .symtab 16 kb allot
var: curr.symtab
  .symtab /Elf32_Sym + curr.symtab ! \ first entry is reserved
: .symtab:pos [curr.symtab @];

: symtext        [st_name @ .strtab +];
: -found^        [dup symtext aux str-at] if [st_value @ auxdrop rdrop true] then ;
: prev           [/Elf32_Sym -];
: .symtab:lookup [>aux .symtab:pos]
                 begin [prev .symtab <>?] while [-found^] repeat [drop auxdrop false];

here not const: #
: ## [word .symtab:lookup assert #];
: symbol: [.symtab:pos >aux
           .strtab:pos  aux st_name  !
                        aux st_value !
           0            aux st_size  !
                        aux st_info  c!
                        aux st_shndx c!
           auxdrop  word +.strtab  /Elf32_Sym curr.symtab +!];

\\\\\\\\ text section
create: .text 16 kb allot
var: curr.text
: 0curr.text [.text cell- curr.text !]; \ incremented on first instruction
0curr.text 
: &.text:pos [curr.text @ .text - &.text +];

: ::    [.text# STT_FUNC   &.text:pos symbol:];

\\\\\\\\ data section
create: .data 16 kb allot
var: curr.data
.data curr.data !
\ TODO: define &.data
\: &.data:pos [curr.data @ .data - &.data +];
\: data: [.data# STT_OBJECT &.data:pos symbol:];
\: word: [data:   curr.data @ !   curr.data cell+!];
