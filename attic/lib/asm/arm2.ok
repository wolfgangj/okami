\ arm2.ok - ARM (AArch32) assembler instructions for pass 2
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

\ reset things from phase 1
' orig:and alias: and
' orig:#   alias: #
' orig:##  alias: ##
0curr.text

here not const: reg \ unlikely value to appear by mistake
here not const: regs
here not const: lsl
here not const: lsr
here not const: asr
here not const: ror

: regs( [0];
: |     [reg = assert 1 swap << or];
: )regs [| regs];

private{

: last@ [curr.text @ @];
: last! [curr.text @ !];
: clear-cond  15 28 << not {lit} [and];
: cond: with [28 << ,] does [@ last@ clear-cond or last!];

: imm       1 25 << {lit} [or];
: setflags  1 20 << {lit} [or]; \ instruction should set the condition flags

\ alu ops also need `3 26 << not {lit} [and];` - but that's a noop as bits 26+27 stay unset
: enc-and  0 21 << {lit} [or];
: enc-eor  1 21 << {lit} [or];
: enc-sub  2 21 << {lit} [or];
: enc-rsb  3 21 << {lit} [or];
: enc-add  4 21 << {lit} [or];
: enc-adc  5 21 << {lit} [or];
: enc-sbc  6 21 << {lit} [or];
: enc-rsc  7 21 << {lit} [or];
: enc-tst  8 21 << {lit} [or];
: enc-teq  9 21 << {lit} [or];
: enc-cmp 10 21 << {lit} [or];
: enc-cmn 11 21 << {lit} [or];
: enc-orr 12 21 << {lit} [or];
: enc-mov 13 21 << {lit} [or];
: enc-bic 14 21 << {lit} [or];
: enc-mvn 15 21 << {lit} [or];
: enc-mul  9  4 << {lit} [or];
: enc-mla  1 21 << {lit} [or enc-mul];
: enc-sdiv 1  4 << 15 12 << or 1 20 << or 7 24 << or {lit} [or]; 
: enc-udiv 1  4 << 15 12 << or 3 20 << or 7 24 << or {lit} [or]; 

: rd [reg = assert 12 << aux> or >aux];
: rn [reg = assert 16 << aux> or >aux];
: rs [reg = assert  8 << aux> or >aux];
: rm [reg = assert       aux> or >aux];

: enc-lsl ;  \ would be a noop: 0 5 << {lit} [or];
: enc-lsr 1 5 << {lit} [or];
: enc-asr 2 5 << {lit} [or];
: enc-ror 3 5 << {lit} [or];

: shift:-imm 1 4 << {lit} [or];
: shift-op [reg =?] if [drop 8 << aux> or shift:-imm >aux]
           else [# = assert  7 << aux> or            >aux] then ;

: op2:reg^ [reg =?] if [drop              aux> or         >aux          rdrop] then ;
: op2:imm^ [#   =?] if [drop              aux> or imm     >aux          rdrop] then ;
: op2:lsl^ [lsl =?] if [drop reg = assert aux> or enc-lsl >aux shift-op rdrop] then ;
: op2:lsr^ [lsr =?] if [drop reg = assert aux> or enc-lsr >aux shift-op rdrop] then ;
: op2:asr^ [asr =?] if [drop reg = assert aux> or enc-asr >aux shift-op rdrop] then ;
: op2:ror^ [ror =?] if [drop reg = assert aux> or enc-ror >aux shift-op rdrop] then ;
: alu:op2  [op2:reg^ op2:imm^ op2:lsl^ op2:lsr^ op2:asr^ op2:ror^ abort];

: instr( [curr.text cell+!] 14 28 << {lit} ;
: )instr [curr.text @ !];

: branch   5 25 << {lit} [or]; \ bit 26 stays unset
: link     1 24 << {lit} [or];
: relative [>aux # = assert &.text:pos - 4 - 2 >>] 1 24 << 1- {lit} [and aux> or];

: enc-movw 3 24 << {lit} [or];
: enc-movt 4 20 << {lit} [or enc-movw];
: upper16 1 16 << 1- 16 << {lit} [and 16 >>];
: lower16 1 16 << 1-       {lit} [and];
\ need to split value up in fedc....ba987654321
: 16bit [# = assert dup] 1 12 << 1- {lit} [and swap 4 <<] 15 16 << {lit} [and or aux> or >aux];

: memop      1 26 << {lit} [or];
: load       1 20 << {lit} [or];
: store      ;
: preinc     1 24 << {lit} [or];
: postinc    1 24 << not {lit} [and];
: writeback  1 21 << {lit} [or];
: 1byte      1 22 << {lit} [or];
: 4byte      ;
: up         1 23 << {lit} [or];
: down       1 23 << not {lit} [and];

: sign>updown [0<?] if [negate aux> down] else [aux> up] then [>aux];
: memop:op2   [# = assert sign>updown] 1 12 << 1- {lit} [and aux> or >aux];

: mmemop  1 27 << {lit} [or];
: reglist [regs = assert aux> or >aux];
: load?   1 20 << {lit} [and];

}in{

 0 cond: eq
 1 cond: ne
 2 cond: cs
 3 cond: cc
 4 cond: mi
 5 cond: pl
 6 cond: vs
 7 cond: vc
 8 cond: hi
 9 cond: ls
10 cond: ge
11 cond: lt
12 cond: gt
13 cond: le
14 cond: al
15 cond: nv

: arm:and
      [instr( enc-and          >aux rd rn alu:op2 aux> )instr];
: eor [instr( enc-eor          >aux rd rn alu:op2 aux> )instr];
: sub [instr( enc-sub          >aux rd rn alu:op2 aux> )instr];
: rsb [instr( enc-rsb          >aux rd rn alu:op2 aux> )instr];
: add [instr( enc-add          >aux rd rn alu:op2 aux> )instr];
: adc [instr( enc-adc          >aux rd rn alu:op2 aux> )instr];
: sbc [instr( enc-sbc          >aux rd rn alu:op2 aux> )instr];
: rsc [instr( enc-rsc          >aux rd rn alu:op2 aux> )instr];
: tst [instr( enc-tst setflags >aux rd    alu:op2 aux> )instr];
: teq [instr( enc-teq setflags >aux rd    alu:op2 aux> )instr];
: cmp [instr( enc-cmp setflags >aux rd    alu:op2 aux> )instr];
: cmn [instr( enc-cmn setflags >aux rd    alu:op2 aux> )instr];
: orr [instr( enc-orr          >aux rd rn alu:op2 aux> )instr];
: mov [instr( enc-mov          >aux rd    alu:op2 aux> )instr];
: bic [instr( enc-bic          >aux rd rn alu:op2 aux> )instr];
: mvn [instr( enc-mvn          >aux rd    alu:op2 aux> )instr];

: mla  [instr( enc-mla          >aux rn rm rs rd   aux> )instr];
: mul  [instr( enc-mul          >aux rn rm rs      aux> )instr];
: sdiv [instr( enc-sdiv         >aux rn rm rs      aux> )instr];
: udiv [instr( enc-udiv         >aux rn rm rs      aux> )instr];

: s [curr.text @ @ setflags curr.text @ !];

: b  [instr( branch      relative )instr];
: bl [instr( branch link relative )instr];

: swi [instr(] 15 24 << {lit} [or )instr];

: movw  [instr( enc-movw >aux rd 16bit aux> )instr];
: movt  [instr( enc-movt >aux rd 16bit aux> )instr];

: mov32 [reg = assert >aux # = assert
         dup lower16 # aux  reg movw
             upper16 # aux> reg movt];

\ we cannot optimize this because pass 1 does not know what we would do.
\: mov32 [reg = assert >aux # = assert dup upper16]
\        if   [dup lower16 # aux  reg movw  upper16 # aux> reg movt]
\        else [            # aux> reg movw] then ;

: ldrb  [instr( memop load 1byte >aux rd rn           aux> up           preinc  )instr];
: ldr   [instr( memop load 4byte >aux rd rn           aux> up           preinc  )instr];
: +ldr  [instr( memop load 4byte >aux rd rn memop:op2 aux>              preinc  )instr];
: +ldr! [instr( memop load 4byte >aux rd rn memop:op2 aux>    writeback preinc  )instr];
: ldr+! [instr( memop load 4byte >aux rd rn memop:op2 aux>              postinc )instr]; \ see below
\ since postinc implies writeback, we are not allowed to set it!

: strb  [instr( memop store 1byte >aux rd rn           aux> up           preinc  )instr];
: str   [instr( memop store 4byte >aux rd rn           aux> up           preinc  )instr];
: +str  [instr( memop store 4byte >aux rd rn memop:op2 aux>              preinc  )instr];
: +str! [instr( memop store 4byte >aux rd rn memop:op2 aux>    writeback preinc  )instr];
: str+! [instr( memop store 4byte >aux rd rn memop:op2 aux>              postinc )instr]; \ see below
\ since postinc implies writeback, we are not allowed to set it!

: ldm [instr( mmemop load  >aux rn reglist aux> up )instr ];
: stm [instr( mmemop store >aux rn reglist aux> up )instr ];

: ib [last@ preinc       last!];
: ia [last@ postinc      last!];
: db [last@ preinc  down last!];
: da [last@ postinc down last!];
: wb [last@ writeback    last!];

: fd [last@ load?] if [ia] else [db] then ;
: fa [last@ load?] if [da] else [ib] then ;
: ed [last@ load?] if [ib] else [da] then ;
: ea [last@ load?] if [db] else [ia] then ;

: r2  [ 2 reg];
: r3  [ 3 reg];
: r4  [ 4 reg];
: r5  [ 5 reg];
: r6  [ 6 reg];
: r7  [ 7 reg];
: r8  [ 8 reg];
: r9  [ 9 reg];
: r10 [10 reg];
: r11 [11 reg];
: r12 [12 reg];
: sp  [13 reg];
: lr  [14 reg];
: pc  [15 reg];
\ most commonly used registers last :)
: r1  [ 1 reg];
: r0  [ 0 reg];

}

private{

: push1  [>aux  -4 # sp   aux> reg +str!];
: pop1   [>aux   4 # sp   aux> reg ldr+!];
: push1^ [reg =?] if [drop push1 rdrop] then ;
: pop1^  [reg =?] if [drop pop1  rdrop] then ;

: pushn  [sp stm fd wb];
: popn   [sp ldm fd wb];
: pushn^ [regs =?] if [pushn rdrop] then ;
: popn^  [regs =?] if [popn  rdrop] then ;

}in{

: push [push1^ pushn^ abort];
: pop  [pop1^  popn^  abort];

}

\ usage e.g.   r1  r0  r0  add  eq   <=>   addeq r0, r0, r1

\ before processing text segment:
' and     alias: orig:and
' arm:and alias: and
: :: [word drop];
