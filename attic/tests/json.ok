\ json.ok - automated tests for lib/json.ok
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

testfile "json.ok"

section "arrays"
test{
  jary   6 jint +jary   5 jint +jary   drop
  const: a   true }
test{
  : sum [0 swap] jary:each [jval +] jary:next ;
  a sum 11 = }
test{ a #jary 2 = }

section "jobj:find"
test{
  jobj   99 jint str' .foo. +jobj
         98 jint str' .bar. +jobj   drop
  const: o
  true }
test{ o str' .bar. jobj:find nip }
test{ o str' .bar. jobj:find drop jval 98 = }
test{ o str' .foo. jobj:find nip }
test{ o str' .foo. jobj:find drop jval 99 = }
test{ o str' .fox. jobj:find not }

section "jobj:finder:"
test{
  str' .foo. jobj:finder: find-foo
  str' .bar. jobj:finder: find-bar
  str' .fox. jobj:finder: find-fox
  true }

test{ o find-bar nip }
test{ o find-bar drop jval 98 = }
test{ o find-foo nip }
test{ o find-foo drop jval 99 = }
test{ o find-fox not }

section "safe accessors"
test{ o          str' .bar. ?jobj@ dup jval 98 = swap @ jtype.int = and }
test{ o          str' .bak. ?jobj@ jundefined = }
test{ o          str' .bak. ?jobj@ str' .foo. ?jobj@ jundefined = }
test{ jundefined str' .bar. ?jobj@ jundefined = }

section "json."
jprint>buf? on
test{
  jtrue json.
  jbuf str' .true. str= }
test{
  jfalse json.
  jbuf str' .false. str= }
test{
  jnull json.
  jbuf str' .null. str= }
test{
  jary drop  json.
  jbuf str' .[]. str= }
test{
  jobj drop  json.
  jbuf str' .{}. str= }
test{
  -1200 jfix  json.
  jbuf str' "-1.200" str= }
test{
  -3 jint  json.
  jbuf str' "-3" str= }
test{
  0 jint  json.
  jbuf str' "0" str= }
test{
  jary str' .abc\def"ghi. jstr +jary drop json.
  jbuf str' .["abc\\def\"ghi"]. str= }
test{
  jary  -1200 jfix +jary jtrue +jary jobj drop +jary drop json.
  jbuf str' '[-1.200,true,{}]' str= }
test{
  o json.
  jbuf str' .{"foo":99,"bar":98}. str= }

section "jparse"
test{ jparse null    true  = swap jnull  = and }
test{ jparse true    true  = swap jtrue  = and }
test{ jparse false   true  = swap jfalse = and }
test{ jparse q       false = }
test{ jparse -       false = }
test{ jparse 1       true  = swap jint? swap jval 1    = and and }
test{ jparse 3.14    true  = swap jfix? swap jval 3140 = and and }
test{ jparse -7      true  = swap jint? swap jval -7   = and and }
test{ jparse ""      true  = swap jstr? swap jval str' ..  str= and and }
test{ jparse "a"     true  = swap jstr? swap jval str' .a. str= and and }
test{ jparse "abc\n" true  = swap jstr? swap jval str' .abc
.                                                          str= and and }
test{ jparse "\\"    true  = swap jstr? swap jval str' .\. str= and and }
test{ jparse []      true  = swap jary? swap #jary 0 = and and }
test{ jparse [true]  true  = swap jary? swap #jary 1 = and and }

test{ jparse ["\""]                true  = swap json>buf str' .["\""].               str= and }
test{ jparse [null,[null,[null]]]  true  = swap json>buf str' .[null,[null,[null]]]. str= and }
test{ jparse [null,[x       false = }
test{ jparse {"hi";         false = }
test{ jparse {{true         false = }

section "JSON i/o equivalence"
: iocheck [dup cdata jparsebuf! jparse] if [json>buf str=] else [false] then ;
test{ str' .[true,"ok"]. iocheck }
test{ str' .{"foo":{"bar":{"baz":"quux"}}}. iocheck }
test{ str' .[]. iocheck }
test{ str' .1. iocheck }
test{ str' .[1]. iocheck }
test{ str' .[1,2,3]. iocheck }
