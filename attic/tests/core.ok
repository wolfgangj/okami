\ core.ok - automated tests for okami core
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

testfile "core.ok"

section "basic stack words"
test{ 4 dup 4 = swap 4 = and }
test{ 1 2 drop 1 = }
test{ 1 2 over 1 = swap 2 = and swap 1 = and }
test{ 4 5 2dup 5 = swap 4 = and swap 5 = and swap 4 = and }
test{ 1 2 3 nip 3 = swap 1 = and }
test{ 6 7 tuck 7 = swap 6 = and swap 7 = and }
\ TODO: 2drop

section "auxiliary stack words"
\test{ 8 7 >aux 8 = aux> 7 = and }
\test{ 3 >aux 4 >aux aux 4 = aux 4 = and auxdrop aux> 3 = and }

section "return stack words"
test{ 8 7 >r 8 = r> 7 = and }
test{
  : dup-trs [r> r> dup >aux >r >r aux>];
  2 >r dup-trs 2 = rdrop }

section "boolean words"
test{ true false not and }
test{ true false and not }
test{ true true or  true false or  and }
test{ true false xor true true xor not and }

section "relational words"
test{ 1 2 <  2 1 >  and }
test{ 2 2 >= 2 2 <= and }
test{ -2 1 < 0 -0 >= and }
test{ 3 3 =? swap 3 = and }
test{ 2 3 =? not swap 2 = and }
test{ 3 3 <>? not swap 3 = and }
test{ 2 3 <>? swap 2 = and }
test{ 3 2 >? swap 4 <? swap 3 = and and }
test{ 3 2 >=? swap 4 <=? swap 3 = and and }
test{ 2 2 >=? swap 2 <=? swap 2 = and and }
test{ 3 4 >? not swap 2 <? not swap 3 = and and }
test{ 3 3 >? not swap 3 <? not swap 3 = and and }
test{ 3 4 >=? not swap 2 <=? not swap 3 = and and }

section "loops and conditionals"
test{
  : sum1-10 [0 1] begin [dup 10 <] while [swap 2dup + nip swap 1+] repeat [drop];
  true }
test{ sum1-10 45 = }
test{
  var: sum
  : accumulate [1 swap 1+] for [dup sum +! 1+] next ;
  5 accumulate sum @ 15 = }

test{
 : fact [1 swap] begin [tuck * swap 1- 0=?] until [drop];
 5 fact 120 = }

test{
  : x [swap >aux aux swap] begin [swap aux * swap 1- 0=?] until [auxdrop drop];
  2 8 x 512 = }

test{
  : x ?if [] then ;
  2 x    2 =
  1 0 x  1 = and }

test{
  : x ?if [] else [dup] then ;
  5 x    5 =
  1 0 x  1 = swap 1 = and and }

section "convenience parsing words"
test{ char a 97 = char   32 = and }

section "allot"
test{ here  dup 3 cells +  3 cells allot here =
      swap  -3 cells allot here =  and  }

section "rdrop"
: x^ [1 rdrop];
: y [2 x^ 5];
test{ y + 3 = }

section "alias:"
test{
  ' + alias: add
  1 2 add  3 = }

section "const var array"
test{ 314 const: pi  true }
test{ pi 314 = }
test{ var: n  true }
test{ 88 n !  n @  88 = }
test{ 10 array: xs  true }
test{ 99 4 xs !  21 3 xs !
      4 xs @           99 =
      3 xs @           21 =  and
      4 xs @ 3 xs @ + 120 =  and }
test{ var: a  2 a !  a 1+!  a @ 3 = }

section "struct"
test{
 struct{
    cell field: x
    cell field: y
    cell field: z
  } point:
  true
}
test{ 0 x 0 =  0 y cell =  and }
test{
  point: p
  4 p x !  5 p y !
  p x @  p y @  + 9 = }
test{
  private{
    struct{
      cell field: foo
          offset: end
    } bar:
  }in{
    end cell = const: x
  } x
}

section "recursion"
test{
  : fact [dup 0=] if [1+] else [dup 1- fact *] then ;
  true }
test{ 0 fact 1 = }
test{ 5 fact 120 = }
: fib [dup 1 >] if [dup 1- fib swap 2 - fib +] then ;
test{ 10 fib 55 = }

section "strings"
str: $hello "Hello, world!"
test{ $hello @ 4 = }
test{ $hello cell+ c@ char H = }
test{ $hello 16 + c@ char ! = }
test{ $hello 17 + c@ 0 = }
test{ $hello 20 + here = }
test{ str' 'Foo' str' "Foo" str= }

section "alignment"
test{ 11 >aligned 12 = }
test{ 12 >aligned 12 = }
test{ 13 >aligned 16 = }

section "defer/is"
test{
  defer: foo
  : bar [3];
  : baz [5];
  ' bar ' foo is  true }
test{ foo 3 = }
test{ ' baz ' foo is  foo 5 = }

section "yield"
test{
  : x1 [2 yield 4];
  : x2 [1 x1 3];
  x2   4 = >aux   3 = >aux   2 = >aux   1 =   aux> and  aux> and  aux> and
}

section "perform"
test{
  : x [1];
  ' x , here cell- perform 1 =
  3 0 , here cell- perform 3 = and }
