\ boot.ok - Bootstrapping okami-forth on the okami engine.
\ Copyright (C) 2018, 2022, 2023 Wolfgang JÃ¤hrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

\     "An adequate bootstrap is a contradiction in terms."
\         -- Alan Perlis

\ We start in a very restricted environment, so setting up the system
\ is a bit of work. In fact, this file needs to be preprocessed before
\ it is fed into the okami engine. The preprocessing involves five
\ aspects:
\
\ 1. replace constants with values depending on OS/arch
\    (This is done by the okcc.sh shell script. The other steps are
\    performed by ppok.)
\ 2. remove the backlashed comments
\ 3. transform [compile] and [[postpone]] stuff into rudimentary form
\ 4. place each word into a machine-word (8 byte), padding with spaces
\ 5. convert #numbers into code that generates them
\
\ We get the address of the dataspace on the stack initially, so we
\ duplicate it for later use when we are going to calculate the end
\ of the dataspace where we will store our dictionary later.
\ Initially, we use the simple builtin dictionary that only supports
\ word names up to 8 bytes and no meta-information.

this

\ We don't want to keep the here pointer on the stack all the time, so
\ let's create a variable for it:

entry: hp
  ' dopush     that ! cell +
  this cell +  that ! drop

\ the phrase "that ! cell +" corresponds to "," - except that it uses
\ the TOS (top of stack) instead of a variable, which we obviously do
\ not yet have available at this point, as we are just defining it.
\ The word "entry:" uses the TOS as well, as it also can not rely on
\ a builtin here pointer.
\
\ From now on, we will use the "hp" variable instead of the value on
\ the stack, that's why we dropped the latter in the end above.
\
\ The preprocessing will turn [foo] into "' foo ," (and [[foo]] into
\ "' lit , ' foo , ' , ,"). But before we can start using it, we need
\ to define ",".  This time, we have to replace "," with a snippet that
\ involves using the variable "hp", so that it is properly updated.
\ Note that this phrase - "hp @ !  cell hp @ + hp !" - is the same as
\ the code for "," itself!

hp @ entry: , drop
  ' docol hp @ !  cell hp @ + hp !
  ' hp    hp @ !  cell hp @ + hp !
  ' @     hp @ !  cell hp @ + hp !
  ' !     hp @ !  cell hp @ + hp !
  ' cell  hp @ !  cell hp @ + hp !
  ' hp    hp @ !  cell hp @ + hp !
  ' @     hp @ !  cell hp @ + hp !
  ' +     hp @ !  cell hp @ + hp !
  ' hp    hp @ !  cell hp @ + hp !
  ' !     hp @ !  cell hp @ + hp !
  ' exit  hp @ !  cell hp @ + hp !

\ Now things get almost convenient. Let's allow us to create colon
\ definitions ending in a semicolon from here on:

hp @ entry: : drop
  ' docol ,
  [hp @ entry: drop  lit docol ,  exit]
: ; [[exit] exit]

\ TODO: remove this debugging helper
: dbg [cell >aux cell aux! auxdrop exit]

\ Of course, these are preliminary definitions, because we will have
\ a more flexible dictionary later that is not based on "entry:" and
\ that allows us to show backtraces and won't limit names to 8 bytes.
\
\ We will often need the value of the here pointer, so define it now.
\ This is an easy one, and in fact our first line that we would always
\ write exactly like this (see how far we have come!):

: here [hp @];

\ We can use this to define some helpers for the control structures.
\ These allow us to leave a branch target open until we know its
\ actual target address. Note that "mark" only calls "cell" to create
\ a dummy value that will be overwritten later.

: mark    [here cell ,];
: resolve [here alt !];

\ Now it's simple to define "if" and friends:

: if   [[branch0] mark];
: end  [resolve];
: else [[branch] mark alt resolve];

\ Sometimes it's useful to allow a NOP:

: perform [this] if [execute] end ;
: perfaux [aux> perform];

\ Loops work as either infinite loops
\   loop [...] repeat
\ or with a while-condition (or multiple!)
\   loop [...] while [...] repeat
\   loop [...] while [...] while [...] repeat
\ or with an `until`:
\   loop [...] until

: loop   [here #0 >aux];
: /while [resolve perfaux];
: while  [[branch0] mark alt  lit /while >aux];
: repeat [[branch]  , perfaux];
: until  [[branch0] , perfaux];
: /for   [resolve [auxdrop drop]];
: for    [[>aux] here [this aux@ <> branch0] mark alt  lit /for >aux];

: create: [here entry: drop [dopush]];
: build   [[here entry: drop   lit dodoes ,   lit] mark [,]];
: does    [[exit] resolve];

: const: build [,] does [@];
: var:   [create: ,];

#0        const: false
false not const: true

: / [/mod nip];

: allot [hp @ alt + hp !];

: cell+ [cell +];
: cell- [cell -];
: cells [cell *];
: +1    [#1 +];
: inc!  [this @ 1+ alt !];

: sys-exit [#0 #0 #0 #0 #0
{sys/syscall:SYS_exit}
syscall];

: abort [sys-exit];
: errcheck [this #0 <] if [#0 alt - abort] end ;

\--- testcode, mostly -----

: syswrite [#0 #0 #0
{sys/syscall:SYS_write}
syscall];

#0 var: char
: emit  [char i8!  #1 char #1 syswrite  drop];
: nl    [#10 emit];
: space [#32 emit]
#111 emit #107 emit nl

\---------------------------------

\ Format of dictionary entries (dict grows downwards):
\
\   +----------------------------+
\   | value of entry             |
\   +----------------------------+
\   | name (variable number      |
\   | of cells, zero-terminated) |
\   +----------------------------+
\   | size of name, cell-aligned |
\   +----------------------------+
\
\ The first entry is used as the buffer in which we store the name we are searching for,
\ which means that our search will always terminate.

\ At this point, the address of the data space is still on the stack. We calculate the end
\ and store it as our dict pointer.

#32 #1024 * + var: dp

: dp- [dp @ alt - dp !];
: >dict [cell dp-  dp @ !];

\ create the initial entry:

#0 >dict \ value should always be zero

\ maximal word size = 8 cells = 64 bytes on 64bit, 32 bytes on 32bit
#0 >dict  #0 >dict  #0 >dict  #0 >dict
#0 >dict  #0 >dict  #0 >dict  #0 >dict

\ We need to keep the address of the name of the first entry, as it is the buffer we use for
\ searching entries:
dp @ const: needle

\ size of name above, by default either 3 or 2 cells (32 vs. 64 bit):
cell #4 and #4 / #2 + >dict
dp @ const: /needle

\ `find` requires that the `needle` above has been setup:

: diff?   [they @ alt @  <>];
: same?   [this @ #0     =];
: next    [cell+ alt cell+ alt];
: -found? [needle] loop
            [diff?] if [dropem true  exit] end
            [same?] if [dropem false exit] end
          [next] repeat ;
: entry+  [this @ + cell+];
: find    [dp @] loop [this -found?] while [entry+] repeat [this @ + @];

\ like `find`, `entry` also requires that the `needle` has been setup:

: src      [this needle + @];
: dst      [this dp     @ +];
: init-dp  [/needle @ cells dp-];
: init-for [#0 /needle @ cells];
: init     [init-dp init-for];
: needle>d [init] for [src dst ! cell+] repeat ;
: entry    [here >dict  needle>d  /needle @ >dict];

\--------------------------------- testcode

#40 var: foo #0 ,
#41 needle !
 #0 needle cell+ !
: test [foo -found?] if [#4] else [#5] end [abort];
test

\--------------------------------- end of testcode

\ Here we are doing the same thing we also did in `repeat`, this time with
\ curly brackets:

: { [perfaux];
: } [perfaux];

\ To start with the fields of the struct definition, we leave a zero on the
\ data stack as an offset accululator for all upcoming fields: 

: }struct [alt !];
: struct{ [#0];

\ Since our curly-syntax-sugar expects execution tokens to be performed at the
\ beginning and end on the aux stack, starting a structure definition just
\ means throwing `struct{` and `}struct` there and reserving space for the
\ struct size:

: struct build [mark             \ struct size filled in later by `}struct`
               lit }struct >aux
               lit struct{ >aux]
         does [@];

\ To define a struct variable, we expect the size on the stack:

: struct: build [,] does [@ here alt allot const:];

\ When defining a field, we have to add its size to the struct size accumulator
\ on the stack. We also need to define the name of the field as a word that
\ calculates the position of the field given the fixed offset and the address
\ of a concrete structure on the stack. The easiest way to do both is by using
\ a build/does combination:

: field: build [that , +] does [@ +];

\ For convenience, we define a few words to define fields of certain sizes:

: cell:  [cell field:];
: i32:   [#4   field:];
: i16:   [#2   field:];
: i8:    [#1   field:];
: bytes: [field:];

struct iobuf {
  cell:        fd
  cell:        on-err
  i16:         pos
  i16:         max
  #4096 bytes: bufdata
}

#0 var: curr-buf
: curr@   [curr-buf @];
: w/iobuf [curr-buf !];

: sys-read [#0 #0 #0
{sys/syscall:SYS_read}
syscall];

: buf0     [curr@ max !  #0 curr@ pos !];
: errhandl [curr@ on-err @ perform];
: errcheck [this #0 <] if [errhandl false] else [true] end ;
: eofcheck [this #0 = not];
: check    [eofcheck this] if [drop errcheck] end ;
: read     [curr@ fd @  curr@ bufdata  #4096  sys-read check];
: fill     [read this] if [buf0] end ;
: filled?  [curr@ pos @ curr@ max @ <];
: ?fill    [filled? not] if [fill] else [true] end ;
: (ioget)  [curr@ bufdata curr@ pos @ + u8@ curr@ pos inc!];
: ioget    [?fill] if [(ioget) true] else [false] end ;

: sys-open [#0 #0 #0 #0
{sys/syscall:SYS_open}
syscall];

{fcntl:O_RDONLY}
const: O_RDONLY

: iobuf0 [curr@ fd !   #0 curr@ pos !  #0 curr@ max !];
: ioopen [sys-open this #0 >=] if [iobuf0 true] else [drop false] end ;

\ TODO: install error handler
iobuf struct: src-buf
: src [src-buf w/iobuf];

\ TODO: strings!!! -> just copy the word into a variable instead
\src "system.ok" O_RDONLY ioopen

#0 max const: result

true var: done?

: done [done? @ not] if [cell] else [#42] end ;
done sys-exit
