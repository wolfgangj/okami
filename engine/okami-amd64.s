; okami-amd64.s - x86-64 version of the okami engine (virtual machine)
; originally based on the runtime of wok and the AArch32 version of okami
; Copyright (C) 2019, 2020, 2022 Wolfgang JÃ¤hrling
;
; ISC License
;
; Permission to use, copy, modify, and/or distribute this software for any
; purpose with or without fee is hereby granted, provided that the above
; copyright notice and this permission notice appear in all copies.
;
; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

; our ABI:
; rax = top of data stack
; rbx = ?
; rcx = (temp)
; rdx = (temp)
; rsp = call stack pointer
; rsi = aux stack pointer
; rbp = data stack pointer
; rdi = top of aux stack
; r8 - r15 = ?

; syscall ABI:
; call no => rax
; args order => rdi, rsi, rdx, r10, r8, r9
; retval => rax (and rdx)

%ifidn OS,openbsd
; OpenBSD wants position-independent code
default rel

; for some reason, when this was generated by nasm,
; it only works with the GNU linker (ld.bfd)
section .note.openbsd.ident progbits alloc noexec nowrite
    align 2
    dd 8,4,1
    db "OpenBSD",0
    dd 0
%endif

; from <sys/syscall.h>
%ifidn OS,openbsd
%define SYS_exit 1
%define SYS_write 4

%elifidn OS,linux
%define SYS_exit 60
%define SYS_write 1

%else
%fatal unknown operating system: OS
%endif

section .rodata

section .bss

; the stacks are empty / downward growing

; rbp is the data stack pointer, rax is top of data stack
data_stack_bottom:
        resq 64
data_stack_top:

; rsi is the aux stack pointer, rdi is top of aux stack
aux_stack_bottom:
        resq 32
aux_stack_top:

orig_rsp:
        resq 1

section .text

; this always takes 7 args
; example: def write (fd @char int :: int) [0 0 0 SYS_write rt-syscall]
global rt__syscall
rt__syscall:
        push rsi
        push rdi
        push rbp
        ; no need to save rax, rsp and the temp registers
        mov rdi, [rbp+48]
        mov rsi, [rbp+40]
        mov rdx, [rbp+32]
        mov r10, [rbp+24]
        mov r8,  [rbp+16]
        mov r9,  [rbp+8]
        syscall
        pop rbp
        pop rdi
        pop rsi
        add rbp, 48
        ret

global rt__args
rt__args:
        mov [rbp], rax
        sub rbp, 8
        mov rax, [orig_rsp]
        add rax, 8
        ret

global rt__env
rt__env:
        mov [rbp], rax
        sub rbp, 8
        mov rax, [orig_rsp]
        mov rdx, [rax]
        lea rax, [rax+rdx*8+16]
        ret

global _start
_start:
        mov [orig_rsp], rsp             ; for access to program args
        lea rbp, [data_stack_top-8]     ; initialize data stack
        lea rsi, [aux_stack_top-8]      ; initialize aux stack

        ; TODO: main stuff here

        xor edi, edi                    ; success
        mov rax, SYS_exit               ; exit syscall
        syscall
