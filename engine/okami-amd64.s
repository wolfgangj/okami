; okami-amd64.s - x86-64 version of the okami engine (virtual machine)
; originally based on the runtime of wok and the AArch32 version of okami
; Copyright (C) 2018, 2019, 2020, 2022 Wolfgang JÃ¤hrling
;
; ISC License
;
; Permission to use, copy, modify, and/or distribute this software for any
; purpose with or without fee is hereby granted, provided that the above
; copyright notice and this permission notice appear in all copies.
;
; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

; our ABI:
; rax = (temp), next leaves CFA here
; rbx = top of data stack
; rcx = return stack pointer
; rdx = (temp)
; rsp = aux stack pointer
; rsi = instruction pointer
; rbp = data stack pointer, empty+downward
; rdi = top of aux stack
; r8 - r15 = ?

; syscall ABI:
; call no => rax
; args order => rdi, rsi, rdx, r10, r8, r9
; retval => rax (and rdx), rcx and r11 are clobbered

%ifidn OS,openbsd
; OpenBSD wants position-independent code
default rel

; for some reason, when this was generated by nasm,
; it only works with the GNU linker (ld.bfd)
section .note.openbsd.ident progbits alloc noexec nowrite
    align 2
    dd 8,4,1
    db "OpenBSD",0
    dd 0
%endif

%ifidn OS,openbsd
; from <sys/syscall.h>
%define SYS_exit 1
%define SYS_mmap 49
; from <sys/mman.h>
%define PROT_READ 1
%define MAP_PRIVATE 2

%elifidn OS,linux
; from <sys/syscall.h>
%define SYS_exit 60

%else
%fatal unknown operating system: OS
%endif

section .rodata

section .bss

; the stacks are empty / downward growing

; rbp is the data stack pointer, rax is top of data stack
return_stack_bottom:
        resq 64
return_stack_top:

; rsi is the aux stack pointer, rdi is top of aux stack
aux_stack_bottom:
        resq 32
aux_stack_top:

orig_rsp:
        resq 1

section .text

%macro next 0
        lodsq                   ; rax = [rsi], rsi += 8
        jmp [rax]               ; get code field value
%endmacro

%macro rpush 1
        mov [rcx], %1
        lea rcx, [rcx - 8]
%endmacro

%macro rpop 1
        lea rcx, [rcx + 8]
        mov %1, [rcx]
%endmacro

dodoes:
        ;; 'next' leaves the CFA in rax
        push rbx
        lea rbx, [rax + 16]     ; put CFA+(2 words) in tos
        ;; push ip on rs and set up new ip as CFA+(1 word)
        rpush rsi
        mov rsi, [rax + 8]
        next

docol:
        ;; push ip on rs
        rpush rsi
        ;; set up new ip
        lea rsi, [rax + 8]
        next

; this always takes 7 args
op_syscall:
        rpush rcx
        rpush rdi
        rpush rsi
        mov rax, rbx
        pop rdi
        pop rsi
        pop rdx
        pop r10
        pop r8
        pop r9
        syscall
        rpop rsi
        rpop rdi
        rpop rcx
        mov rbx, rax
        next

op_args:
        push rbx
        mov rbx, [orig_rsp]
        add rbx, 8
        next

op_env:
        push rbx
        mov rax, [orig_rsp]
        mov rdx, [rax]
        lea rbx, [rax+rdx*8+16]
        next

global _start
_start:
        mov [orig_rsp], rsp             ; for access to program args

        ;; load input file
        mov rax, SYS_mmap
        xor rdi, rdi            ; addr = 0
        mov rsi, 1024 * 32      ; len = 32k
        mov rdx, PROT_READ      ; prot
        mov r10, MAP_PRIVATE    ; flags
        mov r8, 3               ; fd
        xor r9, r9              ; offset = 0
        syscall

        lea rcx, [return_stack_top-8]   ; initialize return stack
        lea rsi, [aux_stack_top-8]      ; initialize aux stack

        ; TODO: main stuff here

        xor edi, edi
        mov rax, SYS_exit               ; exit syscall
        syscall
